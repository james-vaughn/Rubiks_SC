Class list:

	Colors (type Enum)
	Side (type Enum)
	Direction(type Enum)
	Face (mutible)
	Neighbors (mutible, data class)
	Cube (mutible, barricade)
	Rotator (static, nested in cube)
	ErrorLogger (singleton)

**No inheritance currently planned

public enum Colors:

	-Enum of possible cube colors
	-E.g. Red, blue, green, ...


public enum Side:

	-Enum of sides relative to a spectator of the cube
	-E.g. Front, back, top, bottom, Left, Right


public enum Direction:

	-Enum of directions for rotations and side directions
	-E.g. Clockwise, left, ...


public class Face:

	Looks like:
					Top

		Left   (0,0) (0,1) (0,2)   Right
		       (1,0) (1,1) (1,2)
		       (2,0) (2,1) (2,2)

			   		Bottom

	-Each point in the matrix would store a color
	-generic concept of a face; direction of face in relation to the cube does not matter

	Variables (private):

		-Contains a 2D Color array; stores the colors for each block
		-Neighbors

	Operations:

		-constructor to set whole face as one color
		-constructor to set initial state of face : 2d array of color

		*As indicated by the diagram for directions

		-getLeft: gets (0,0), (1,0), and (2,0),
		-getRight,
		-getTop,
		-getBottom,
		-getFullFace: returns whole color matrix,

		-setters for all of the above

		(don't need middle according to the specs)


public data class Neighbors:

	-Stores info about the neighboring faces and what row/col is
	being touched by the face

	-Associates directions to faces w/ faces

	-pretty much only used to store data coherently and together

	Variables:
		-TopNeighbor
		-BottomNeighbor
		-LeftNeighbor
		-RightNeighbor

	Operations:
		-getters and setters for all vars
		-.equals for comparisons

	E.g.:
		TopNeighbor for LeftFace is TopFace
		BottomNeighbor for BottomFace is BackFace


private nested class Cube.Rotator:

	-Handles the actual cube manipulations like rotation

	Operations:

		*Middle rotations are not require by the spec
		-Operations for rotating faces
		-Getting what needs to be rotated
		-setting the faces which were manipulated


public Cube:

	Logical layout:

						Top
		Back	Left	Front	Right
						Bottom

	Variable:

		-Map of Sides to Faces

	Operations:

		-Pretty Printer
		-Constructors to set initial state of faces : list of 2d arrays of colors
		-constructor to set default state
		-error handling for initial construction
		-delegators to the rotator which check for errors

		-Only class with public a method; method will take a side and direction
		cube will error check the input and then delegate to the rotator

	*The cube class with do initial error handling for inputs,
	serving as the main barricade; all other exceptions will be logged
	and throw a runtime exception
	*Will delegate methods to the rotator, serving as an interface to the rotator for cube manipulation purposes


public Singleton ErrorLogger:

	Singleton that simply writes an error message an throws a runtimeException w/ messages about the failure


Error handling strategy:

	-Use ErrorLogger to globally handle errors
	-send error messages through the logger and immediately die w/ a RuntimeException


Pseudocode for rotations: (only done for reasonably complicated method)

	def rotate(dir, face):

				Create temporary storage for 4 lists of 3 colors

				Retrieve the four neighboring lists of the specified face

				for each neighbor in the face's neighbor list:
					add to the temporary storage the correct row/col based
					on the direction of the face to the neighbor

				Swap the temporary storages based on dir

				Set the correct rows/columns on neighboring sides to the correct colors

				Rotate the contents of face based on dir
					Use getters from Face class
