Class list:

	Colors (type Enum)
	Side (type Enum)
	Direction(type Enum)
	Face (mutible)
	Neighbors (mutible)
	Cube (mutible, barricade)
	Rotator (static, nested in cube)
	ErrorLogger (singleton)

**No inheritance

public Colors:

	-Enum of possible cube colors
	-E.g. Red, blue, green, ...


public Side:

	-Enum of sides relative to a spectator of the cube
	-E.g. Front, back, top, bottom, Left, Right


public Direction:

	-Enum of directions for rotations and side directions
	-E.g. Clockwise, left, ...


private Face:

	Looks like:
					Top

		Left   (0,0) (0,1) (0,2)   Right
		       (1,0) (1,1) (1,2)
		       (2,0) (2,1) (2,2)

			   		Bottom

	Variables:

		-Contains a 2D Color array; stores the colors for each block
		-Neighbors

	Operations:

		-constructor to set whole face as one color
		-constructor to set initial state of face : 2d array of color
		-getLeft,
		-getRight,
		-getTop,
		-getBottom,
		-getFullFace
		-setters for all of the above

		(don't need middle)


private Neighbors:

	-Stores info about the neighboring faces and what row/col is
	being touched by the face

	-Associates directions to faces w/ faces


private Rotator:

	Operations:

		*Middle rotations are not require by the spec
		-Operations for rotating faces
		-Getting what needs to be rotated
		-setting the faces which were manipulated


public Cube:

	Logical layout:

						Top
		Back	Left	Front	Right
						Bottom

	Variable:

		-Map of Sides to Faces

	Operations:

		-Pretty Printer
		-Constructors to set initial state of faces : list of 2d arrays of colors
		-constructor to set default state
		-error handling for initial construction
		-delegators

		-Only class with public a method; method will take a side and direction
		cube will error check the input and then delegate to the rotator

	*The cube class with do initial error handling for inputs,
	serving as the main barricade; all other exceptions will be logged
	and throw a runtime exception
	*Will delegate methods to the rotator


private ErrorLogger:

	Singleton that simply writes an error message an throws a runtimeException



Pseudocode for rotations: (only reasonably complicated method)

	def rotate(dir, face):

			create temporary storage for 4 neighbors

			for each neighbor in the face's neighbor list:
				add to the temporary storage the correct row/col based on direction of the face to the neighbor

			swap the temporary storages based on dir

			rotate the contents of face based on dir
